# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.199.0"

desc 'Starts a new minor release X.^.0'
lane :start_new_release do
  new_release
end 

lane :pr_check do
  test_check
  danger(
    verbose: true, 
    github_api_token: ENV["GITHUB_API_TOKEN"]
  )
end

def new_release
  changelog = read_changelog

  if !changelog.gsub(/\s+/, "").empty?
    # test_check
    version = bump_podspec
    create_release_pull_request(version, changelog)
    pod_release(version)
    github_release(changelog)
    slack_release_notification
  else 
    slack_nothing_to_release_notification
  end
end

def test_check
  cocoapods(
    clean_install: true, 
    podfile: "./ExampleSwift/Podfile"
  )
  run_tests(
    workspace: "ExampleSwift/ExampleSwift.xcworkspace", 
    scheme: "ExampleSwift"
  )
end

def pod_release(version)
  version_bump_podspec(path: "MercadoPagoSDKV4.podspec", version_number: version)

  if not `pod repo list`.strip.split("\n").include?("MLPods")
    unless system("pod repo add mobile-ios_specs git@github.com:mercadolibre/mobile-ios_specs.git")
      raise 'Private deploy has failed. Check the above log'
    end 
  end

  pod_push(
    path: "MercadoPagoSDKV4.podspec", 
    repo: "mobile-ios_specs",
    allow_warnings: true,
    skip_import_validation: true, 
    skip_tests: true
  )  
end

def bump_podspec
  sh('git fetch --tags')
  last_version = git_tags
    .select { |tag| /^version\/[0-9]+\.[0-9]+\.[0-9]+$/.match?(tag) }
    .map { |tag| tag.delete_prefix("version/") }
    .sort_by { |v| Gem::Version.new(v) }
    .last

  return bump(last_version, ENV["RELEASE_BUMP_TYPE"])
end

def create_release_pull_request(new_version, changelog)
  tag_name = "version/#{new_version}"
  UI.message("tag name: #{tag_name}")
  add_git_tag(tag: tag_name)
  stamp_changelog(
    section_identifier: new_version, 
    git_tag: tag_name, 
    should_stamp_date: true
  )
  git_commit(
    path: ["./CHANGELOG.md"],
    message: "Release #{new_version}"
  )
  push_to_git_remote(
    remote_branch: "release/#{new_version}",
    tags: true
  )
  create_pull_request(
    repo: "mercadopago/px-ios",
    title: "Release #{new_version}",
    head: "release/#{new_version}",
    base: "develop",
    body: changelog
  )
end

def github_release(changelog)
  set_github_release(
    repository_name: 'mercadopago/px-ios',
    api_token: ENV['GITHUB_TOKEN'],
    name: "Release #{new_version}",
    tag_name: "version/#{new_version}",
    description: changelog,
    commitish: last_git_commit()[:commit_hash]
  )
end

def bump(version, type)
  separator = "."
  splited_version = version.split(separator).map(&:to_i)

  if splited_version.length < 3 
    return ""
  end

  case type
  when "major"
    splited_version[0] += 1
    splited_version[1] = 0
    splited_version[2] = 0
  when "minor"
    splited_version[1] += 1
    splited_version[2] = 0
  when "patch"
    splited_version[2] += 1
  else 
    return ""
  end

  return splited_version.join(separator)
end

def slack_release_notification
  pod_version = version_get_podspec(path: "MercadoPagoSDKV4.podspec")
  slack(
    message: "🕺 Lib de PX publicada 💃 @px-iosers",
    username: 'Release PX',
    default_payloads: [:git_author],
    attachment_properties: {
      fields: [
        {
          title: "📲Lib Version Number",
          value: pod_version
        },{
            title: "📝What´s new? RC Notes",
            value: "https://github.com/mercadopago/px-ios/releases/tag/release/#{pod_version}"
        }, {
          title: "Release pull request (don't forget to merge it)",
          value: def_context[SharedValues::CREATE_PULL_REQUEST_HTML_URL]
        }
      ]
    }
  )
end

def slack_nothing_to_release_notification
  slack(
    message: "There won't be a release on this week! No changes needed to be deploy (according to CHANGELOG) @px-iosers",
    username: 'Release PX'
  )
end

def on_error(exception)
  slack(
    message: "@px-iosers #{exception}", 
    username: 'Release PX', 
    success: false
  )
end